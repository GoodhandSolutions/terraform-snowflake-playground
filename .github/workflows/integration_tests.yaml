# Run secret-dependent integration tests only if trusted PR, or after
# user with write permissions has commented /ok-to-test on a (fork-based) pull request

on:
  pull_request:
  repository_dispatch:
    types: [ok-to-test-command]

name: Integration Tests

jobs:
  # Branch-based pull request
  integration-test:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_snowflake_rsa_key_path: /tmp/snowflake.p8
      TF_VAR_snowflake_user: ${{ secrets.SNOWFLAKE_USER_NAME }}
      TF_VAR_snowflake_account: ${{ secrets.SNOWFLAKE_ACCOUNT_ID }}
      TF_VAR_snowflake_region: ${{ secrets.SNOWFLAKE_REGION }}
      SNOWFLAKE_RSA_KEY_PATH: /tmp/snowflake.p8
      SNOWFLAKE_USER_NAME: ${{ secrets.SNOWFLAKE_USER_NAME }}
      SNOWFLAKE_ACCOUNT_ID: ${{ secrets.SNOWFLAKE_ACCOUNT_ID }}
      SNOWFLAKE_REGION: ${{ secrets.SNOWFLAKE_REGION }}
    permissions:
      pull-requests: write
      checks: write
    if: | # source is trusted pr OR ok-to-test
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name == github.repository
      ) || (
        github.event_name == 'repository_dispatch' &&
        github.event.client_payload.slash_command.args.named.sha != '' &&
        contains(
          github.event.client_payload.pull_request.head.sha,
          github.event.client_payload.slash_command.args.named.sha
        )
      )
    steps:
      - name: Checkout Playground Source Code
        uses: actions/checkout@v3
        with:
          path: src

      - name: Save Snowflake RSA Key
        run: echo ${{ secrets.SNOWFLAKE_RSA_KEY }} | base64 -d > /tmp/snowflake.p8
        shell: bash

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Cache Terraform Provider
        uses: actions/cache@v3
        id: cache-sf-tf-provider
        with:
          path: tf_provider/terraform-provider-snowflake
          key: ${{ runner.os }}-sf-tf-provider

      - name: Checkout Updated Terraform Provider
        if: ${{ steps.cache-sf-tf-provider.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v3
        with:
          repository: 'badge/terraform-provider-snowflake'
          path: tf_provider

      - name: Install poetry
        run: pip install poetry

      - name: Deploy Test Environment
        id: deploy_test_env
        working-directory: src/testing/test_deployment
        run: make deploy

      - name: Deploy Test Objects
        working-directory: src/testing/test_objects
        run: make deploy

      - name: Run Tests
        working-directory: src/testing/
        run: make run_tests

      - name: Clean Integration Environment
        if: ${{ (success() || failure()) && (steps.deploy_test_env.conclusion == 'success') }}
        working-directory: src/testing/
        run: make clean

      - run: |
          echo "Integration tests... success! :)"

      - uses: actions/github-script@v6
        id: update-check-run
        if: | # source is ok-to-test
          (
            github.event_name == 'repository_dispatch' &&
            github.event.client_payload.slash_command.args.named.sha != '' &&
            contains(
              github.event.client_payload.pull_request.head.sha,
              github.event.client_payload.slash_command.args.named.sha
            )
          )
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          # Conveniently, job.status maps to
          # https://developer.github.com/v3/checks/runs/#update-a-check-run
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
