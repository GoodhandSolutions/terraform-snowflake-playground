# Run secret-dependent integration tests only if trusted PR, or after
# user with write permissions has commented /ok-to-test on a (fork-based) pull request

on:
  pull_request:
  repository_dispatch:
    types: [ok-to-test-command]

name: Integration tests

jobs:
  # Branch-based pull request
  integration-test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      checks: write
    if: | # source is trusted pr OR ok-to-test
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name == github.repository
      ) || (
        github.event_name == 'repository_dispatch' &&
        github.event.client_payload.slash_command.args.named.sha != '' &&
        contains(
          github.event.client_payload.pull_request.head.sha,
          github.event.client_payload.slash_command.args.named.sha
        )
      )
    steps:
      - name: Branch based PR checkout
        uses: actions/checkout@v3
        if: | # source is trusted pr
          (
            github.event_name == 'pull_request' &&
            github.event.pull_request.head.repo.full_name == github.repository
          )
      - name: Fork based /ok-to-test checkout
        uses: actions/checkout@v3
        if: | # source is ok-to-test
          (
            github.event_name == 'repository_dispatch' &&
            github.event.client_payload.slash_command.args.named.sha != '' &&
            contains(
              github.event.client_payload.pull_request.head.sha,
              github.event.client_payload.slash_command.args.named.sha
            )
          )

    # TODO: <insert integration tests needing secrets>
      - run: |
          echo "Integration tests... success! ;-)"

      # Update check run called "integration-fork"
      - uses: actions/github-script@v6
        id: update-check-run
        if: | # source is ok-to-test
          (
            github.event_name == 'repository_dispatch' &&
            github.event.client_payload.slash_command.args.named.sha != '' &&
            contains(
              github.event.client_payload.pull_request.head.sha,
              github.event.client_payload.slash_command.args.named.sha
            )
          )
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          # Conveniently, job.status maps to
          # https://developer.github.com/v3/checks/runs/#update-a-check-run
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
