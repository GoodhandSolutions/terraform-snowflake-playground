# Pre-setup
# 1. Setup connection object to Snowflake
# 2. Load dummy data into Snowflake (may need to be done with a put from snowsql)
# 3. Call the procedure using the dummy data
# 4. Compare the log to the expected log

import os
import pandas as pd
import snowflake.connector
from snowflake.connector.pandas_tools import write_pandas

from cryptography.hazmat.backends import default_backend

# from cryptography.hazmat.primitives.asymmetric import rsa
# from cryptography.hazmat.primitives.asymmetric import dsa
from cryptography.hazmat.primitives import serialization

pd.set_option("display.max_columns", None)
pd.set_option("display.max_rows", None)


def connect_to_snowflake():
    with open(os.environ.get("SNOWFLAKE_RSA_KEY_PATH"), "rb") as key:
        p_key = serialization.load_pem_private_key(
            key.read(), password=None, backend=default_backend()
        )

    pkb = p_key.private_bytes(
        encoding=serialization.Encoding.DER,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption(),
    )

    conn = snowflake.connector.connect(
        user=os.environ.get("SNOWFLAKE_USER_NAME"),
        role="SYSADMIN",
        account=os.environ.get("SNOWFLAKE_ACCOUNT_ID"),
        region=os.environ.get("SNOWFLAKE_REGION"),
        warehouse="COMPUTE_WH",
        private_key=pkb,
    )

    return conn


def test_streams_objects(snapshot):
    print()
    conn = connect_to_snowflake()

    cur = conn.cursor()
    try:
        cur.execute("CALL TEST_PLAYGROUND.ADMINISTRATION.UPDATE_OBJECTS('streams')")
        cur.execute("SELECT * FROM TEST_PLAYGROUND.ADMINISTRATION.STREAMS")
        df = cur.fetch_pandas_all()

    finally:
        cur.close()

    df.drop(columns=["CREATED_ON", "STALE_AFTER", "STALE"], inplace=True)
    print(df.head())
    print(df.dtypes)

    snapshot.assert_match(df)


def test_tasks_objects(snapshot):
    print()
    conn = connect_to_snowflake()

    cur = conn.cursor()
    try:
        cur.execute("CALL TEST_PLAYGROUND.ADMINISTRATION.UPDATE_OBJECTS('tasks')")
        cur.execute("SELECT * FROM TEST_PLAYGROUND.ADMINISTRATION.TASKS")
        df = cur.fetch_pandas_all()

    finally:
        cur.close()

    df.drop(
        columns=[
            "CREATED_ON",
            "ID",
            "LAST_COMMITTED_ON",
            "LAST_SUSPENDED_ON",
            "ALLOW_OVERLAPPING_EXECUTION",
        ],
        inplace=True,
    )
    print(df.head())
    print(df.dtypes)

    snapshot.assert_match(df)


def test_tidy_playground(snapshot):
    print()
    conn = connect_to_snowflake()
    cur = conn.cursor()

    dummy_data = pd.read_csv("data/object_ages.csv")
    cur.execute("USE TEST_PLAYGROUND.ADMINISTRATION")
    cur.execute("TRUNCATE TABLE TEST_PLAYGROUND.ADMINISTRATION.STATIC_OBJECT_AGES")

    write_pandas(
        conn, dummy_data, 'STATIC_OBJECT_AGES'
    )

    # TODO: Check that the object which is meant to be fail, fails
    # TODO: Update the days since ... fields in the object_ages.csv file
    # TODO: Add to integration tests

    # Update the tag values to match those dynamically generated by Terraform
    cur.execute("""
        UPDATE TEST_PLAYGROUND.ADMINISTRATION.STATIC_OBJECT_AGES
            SET EXPIRY_DATE = DATEADD(hour, 960, CURRENT_TIMESTAMP)
            WHERE OBJECT_NAME = '"TABLE_1"'
    """)
    cur.execute("""
        UPDATE TEST_PLAYGROUND.ADMINISTRATION.STATIC_OBJECT_AGES
            SET EXPIRY_DATE = DATEADD(hour, -960, CURRENT_TIMESTAMP)
            WHERE OBJECT_NAME = '"TASK_1"'
    """)
    cur.execute("""
        UPDATE TEST_PLAYGROUND.ADMINISTRATION.STATIC_OBJECT_AGES
            SET EXPIRY_DATE = DATEADD(hour, 1200, CURRENT_TIMESTAMP)
            WHERE OBJECT_NAME = '"STAGE_1"'
    """)

    try:
        cur.execute(
            """CALL TEST_PLAYGROUND.ADMINISTRATION.TIDY_PLAYGROUND(
                'false',
                'TEST_PLAYGROUND.ADMINISTRATION.EXPIRY_DATE',
                31,
                90,
                'TEST_PLAYGROUND.ADMINISTRATION.STATIC_OBJECT_AGES',
                'TEST_PLAYGROUND.ADMINISTRATION.LOG'
            )"""
        )

        cur.execute("SELECT * FROM TEST_PLAYGROUND.ADMINISTRATION.LOG_VIEW")
        log = cur.fetch_pandas_all()
        log.drop(columns=["EVENT_TIME", "RUN_ID"], inplace=True)
        snapshot.assert_match(log)

        cur.execute("SELECT * FROM TEST_PLAYGROUND.ADMINISTRATION.LOG_SUMMARY")
        log_summary = cur.fetch_pandas_all()
        snapshot.assert_match(log_summary)

    finally:
        cur.close()


def test_conn():
    conn = connect_to_snowflake()

    cur = conn.cursor()
    try:
        cur.execute("SELECT CURRENT_VERSION()")
        df = cur.fetch_pandas_all()

        print()
        print(df.head())
    finally:
        cur.close()
